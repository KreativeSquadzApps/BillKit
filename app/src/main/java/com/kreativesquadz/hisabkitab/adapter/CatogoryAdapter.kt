package com.kreativesquadz.hisabkitab.adapter

import android.view.LayoutInflater
import android.view.ViewGroup
import android.widget.ImageView
import androidx.databinding.DataBindingUtil
import androidx.databinding.ViewDataBinding
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.kreativesquadz.hisabkitab.BR
import com.kreativesquadz.hisabkitab.R
import com.kreativesquadz.hisabkitab.interfaces.OnItemClickListener
import com.kreativesquadz.hisabkitab.model.Category
import com.kreativesquadz.hisabkitab.model.Product

class CatogoryAdapter<T>(
    private var items: List<T>,
    private val listener: OnItemClickListener<T>,
    private val listenerDelete: OnItemClickListener<T>,
    private val layoutResId: Int,
    private val bindVariableId: Int
) : RecyclerView.Adapter<CatogoryAdapter.ViewHolder<T>>() {
    private val categoryProductsMap = mutableMapOf<String, List<Product>>() // Map to store products per category

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder<T> {
        val inflater = LayoutInflater.from(parent.context)
        val binding: ViewDataBinding = DataBindingUtil.inflate(inflater, layoutResId, parent, false)
        return ViewHolder(binding)
    }

    override fun onBindViewHolder(holder: ViewHolder<T>, position: Int) {
        val item = items[position]

        if (item is Category) {
            // Get the products for this category from the map
            val categoryProducts = categoryProductsMap[item.categoryName] ?: emptyList()


            // Initialize the ProductsAdapter
            val productsAdapter = GenericAdapter(
                categoryProducts, // List of products for the category
                object : OnItemClickListener<Product> {
                    override fun onItemClick(product: Product) {
                        // Handle product item click
                    }
                },
                R.layout.item_category_products, // Layout for individual product items
                BR.products // Variable ID generated by data binding for product
            )

            // Get the RecyclerView from the ViewHolder's itemView
            val recyclerView = holder.itemView.findViewById<RecyclerView>(R.id.recyclerViewProducts)
            val deleteCategory = holder.itemView.findViewById<ImageView>(R.id.deleteCategory)

            if (categoryProducts.size == 0) {
                deleteCategory.visibility = ImageView.VISIBLE
                recyclerView.visibility = RecyclerView.GONE
            }else{
                deleteCategory.visibility = ImageView.GONE
                recyclerView.visibility = RecyclerView.VISIBLE
            }


            // Set the adapter and layout manager
            recyclerView.adapter = productsAdapter
            recyclerView.layoutManager = LinearLayoutManager(holder.itemView.context)
            holder.bind(item, listener, listenerDelete,deleteCategory,  bindVariableId)
        }
    }

    override fun getItemCount(): Int = items.size

    fun submitList(newItems: List<T>) {
        items = newItems
        notifyDataSetChanged()
    }
    fun deleteItem(position: Int) {
        val itemss = items.toMutableList()
        itemss.removeAt(position)
        items = emptyList()
        items = itemss
        notifyItemRemoved(position)
        notifyDataSetChanged()
    }
    fun setProductsForCategory(categoryName: String, products: List<Product>) {
        categoryProductsMap[categoryName] = products
        notifyDataSetChanged() // Notify adapter to rebind the views
    }

    class ViewHolder<T>(val binding: ViewDataBinding) : RecyclerView.ViewHolder(binding.root) {
        fun bind(item: T, listener: OnItemClickListener<T>,listenerDelete: OnItemClickListener<T>, delete:ImageView  ,variableId: Int) {
            binding.setVariable(variableId, item)
            binding.root.setOnClickListener { listener.onItemClick(item) }
            delete.setOnClickListener{ listenerDelete.onItemClick(item) }
            binding.executePendingBindings()
        }
    }

}

