package com.kreativesquadz.hisabkitab.ui.home.tab.savedOrders

import androidx.fragment.app.viewModels
import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.activityViewModels
import androidx.recyclerview.widget.ItemTouchHelper
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.kreativesquadz.hisabkitab.BR
import com.kreativesquadz.hisabkitab.R
import com.kreativesquadz.hisabkitab.adapter.GenericAdapter
import com.kreativesquadz.hisabkitab.databinding.FragmentSavedOrdersBinding
import com.kreativesquadz.hisabkitab.interfaces.FragmentBaseFunctions
import com.kreativesquadz.hisabkitab.interfaces.OnItemClickListener
import com.kreativesquadz.hisabkitab.model.SavedOrder
import com.kreativesquadz.hisabkitab.ui.home.tab.SharedViewModel
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class SavedOrdersFragment : Fragment(), FragmentBaseFunctions {
    private var _binding: FragmentSavedOrdersBinding? = null
    private val binding get() = _binding!!

    private val viewModel: SavedOrdersViewModel by viewModels()
    private val sharedViewModel: SharedViewModel by activityViewModels()
    private lateinit var adapter: GenericAdapter<SavedOrder>

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        viewModel.loadSavedOrders()

        
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentSavedOrdersBinding.inflate(inflater, container, false)
        observers()
        onClickListener()
        setupRecyclerView()

        return binding.root
    }

    override fun observers() {
        viewModel.savedOrders.observe(viewLifecycleOwner) {
            it.data?.let {
                adapter.submitList(it)
            }
        }
    }

    override fun onClickListener() {

    }




    private fun setupRecyclerView() {
        adapter = GenericAdapter(
            viewModel.savedOrders.value?.data ?: emptyList(),
            object : OnItemClickListener<SavedOrder> {
                override fun onItemClick(item: SavedOrder) {
                    Log.d("TAG", "onItemClick: ${item}")
                    item.items?.let {
                        sharedViewModel.setItemsList(item.items)
                    }
                }
            },
            R.layout.item_saved_order,
            BR.savedOrder // Variable ID generated by data binding
        )
        binding.recyclerView.adapter = adapter
        binding.recyclerView.layoutManager = LinearLayoutManager(context)
        setupSwipeToDelete(binding.recyclerView)
    }

    private fun setupSwipeToDelete(recyclerView: RecyclerView) {
        val itemTouchHelperCallback = object : ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT) {
            override fun onMove(
                recyclerView: RecyclerView,
                viewHolder: RecyclerView.ViewHolder,
                target: RecyclerView.ViewHolder
            ): Boolean {
                return false
            }

            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {
                val position = viewHolder.adapterPosition
                val savedOrder = viewModel.savedOrders.value?.data?.get(position)
                viewModel.deleteSavedOrder(savedOrder!!.orderId)
            }
        }

        val itemTouchHelper = ItemTouchHelper(itemTouchHelperCallback)
        itemTouchHelper.attachToRecyclerView(recyclerView)
    }


}