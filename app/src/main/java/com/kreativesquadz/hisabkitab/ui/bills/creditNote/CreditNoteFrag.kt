package com.kreativesquadz.hisabkitab.ui.bills.creditNote

import android.app.DatePickerDialog
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.kreativesquadz.hisabkitab.BR
import com.kreativesquadz.hisabkitab.R
import com.kreativesquadz.hisabkitab.adapter.GenericAdapterPagination
import com.kreativesquadz.hisabkitab.adapter.GenericDiffCallback
import com.kreativesquadz.hisabkitab.adapter.GenericSpinnerAdapter
import com.kreativesquadz.hisabkitab.databinding.FragmentCreditNoteBinding
import com.kreativesquadz.hisabkitab.interfaces.OnItemClickListener
import com.kreativesquadz.hisabkitab.model.CreditNote
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.Locale

@AndroidEntryPoint
class CreditNoteFrag : Fragment() {
     var _bindings : FragmentCreditNoteBinding?=null
     val binding get() =  _bindings!!
    private val viewModel: CreditNoteViewModel by activityViewModels()
    private lateinit var adapter: GenericAdapterPagination<CreditNote>

    val statusOption = listOf("All",
        "Active",
        "Cleared")

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val calendar = Calendar.getInstance().apply {
            timeInMillis = viewModel.getSelectedDate()
            set(Calendar.HOUR_OF_DAY, 0)
            set(Calendar.MINUTE, 0)
            set(Calendar.SECOND, 0)
            set(Calendar.MILLISECOND, 0)
        }
        val startOfDay = calendar.timeInMillis
        calendar.add(Calendar.DAY_OF_MONTH, 1)
        val endOfDay = calendar.timeInMillis - 1
        viewModel.getPagedCreditNotesFromDb(startOfDay, endOfDay)

    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _bindings = FragmentCreditNoteBinding.inflate(inflater,container,false)
        setupSpinnerStatus(statusOption)
        setupRecyclerView()
        observers()
        onClickListener()
        return binding.root
    }


   fun observers(){
       val selectedDate = viewModel.getSelectedDate()
       binding.tvDate.text = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault()).format(selectedDate)


       viewModel.creditNoteList.observe(viewLifecycleOwner) {


       }
       lifecycleScope.launch {
           viewModel.creditNotes.collectLatest { pagingData ->
               adapter.submitData(pagingData)
               adapter.notifyDataSetChanged()
           }
       }

   }

    private fun onClickListener(){
        binding.searchView.setOnClickListener {
            val action = CreditNoteFragDirections.actionCreditNoteFragToCreditNoteSearchFragment()
            findNavController().navigate(action)
        }
        binding.calenderView.setOnClickListener {
            setCurrentDateOnCalendar(binding.tvDate)
        }
    }
    private fun setupSpinnerStatus(itemList: List<String>) {
        val adapter = GenericSpinnerAdapter(
            context = requireContext(),
            layoutResId = R.layout.dropdown_item, // Use your custom layout
            bindVariableId = BR.item,
            staticItems = itemList
        )
        binding.dropdownCreditNote.setAdapter(adapter)
        binding.dropdownCreditNote.setOnItemClickListener { _, _, position, _ ->
            val selectedItem = adapter.getItem(position)
            Toast.makeText(requireContext(), selectedItem, Toast.LENGTH_SHORT).show()
            viewModel.filterCreditNotes(selectedItem)

        }
    }
    private fun setupRecyclerView() {
        val diffCallback = GenericDiffCallback<CreditNote>(
            areItemsSame = { oldItem, newItem -> oldItem.invoiceId == newItem.invoiceId },
            areContentsSame = { oldItem, newItem -> oldItem == newItem }
        )
        adapter = GenericAdapterPagination(
            object : OnItemClickListener<CreditNote> {
                override fun onItemClick(item: CreditNote) {
                    val action = CreditNoteFragDirections.actionCreditNoteFragToCreditNoteDetailsFragment(item.invoiceId.toString())
                    findNavController().navigate(action)
                }
            },
            R.layout.item_credit_note,
            BR.creditNote // Variable ID generated by data binding
            ,diffCallback
        )
        binding.recyclerView.adapter = adapter
        binding.recyclerView.layoutManager = LinearLayoutManager(context)
    }

    private fun setCurrentDateOnCalendar(textView: TextView) {
        val calendar = Calendar.getInstance()
        val year = calendar.get(Calendar.YEAR)
        val month = calendar.get(Calendar.MONTH)
        val day = calendar.get(Calendar.DAY_OF_MONTH)

        // Create DatePickerDialog and set initial date to current date
        val datePickerDialog = DatePickerDialog(requireContext(), { _, selectedYear, selectedMonth, selectedDay ->
            // Format the selected date
            val selectedDate = "$selectedDay-${selectedMonth + 1}-$selectedYear"
            textView.text = selectedDate
            val selectedCalendar = Calendar.getInstance().apply {
                set(Calendar.YEAR, selectedYear)
                set(Calendar.MONTH, selectedMonth)
                set(Calendar.DAY_OF_MONTH, selectedDay)
                set(Calendar.HOUR_OF_DAY, 0)
                set(Calendar.MINUTE, 0)
                set(Calendar.SECOND, 0)
                set(Calendar.MILLISECOND, 0)
            }
            val selectedTimestamp = selectedCalendar.timeInMillis
            viewModel.saveSelectedDate(selectedTimestamp)

            val startOfDay = selectedCalendar.timeInMillis
            selectedCalendar.add(Calendar.DAY_OF_MONTH, 1)
            val endOfDay = selectedCalendar.timeInMillis - 1
            viewModel.getPagedCreditNotesFromDb(startOfDay, endOfDay)
            binding.tvDate.text = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault()).format(selectedTimestamp)

        }, year, month, day)
        datePickerDialog.show()
    }



}