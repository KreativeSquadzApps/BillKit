package com.kreativesquadz.hisabkitab.ui.settings.menuItems.billSettings

import androidx.fragment.app.viewModels
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.recyclerview.widget.LinearLayoutManager
import com.kreativesquadz.hisabkitab.BR
import com.kreativesquadz.hisabkitab.Config
import com.kreativesquadz.hisabkitab.R
import com.kreativesquadz.hisabkitab.adapter.GenericAdapter
import com.kreativesquadz.hisabkitab.adapter.showCustomAlertDialog
import com.kreativesquadz.hisabkitab.databinding.FragmentBillSettingsBinding
import com.kreativesquadz.hisabkitab.interfaces.OnItemClickListener
import com.kreativesquadz.hisabkitab.model.DialogData
import com.kreativesquadz.hisabkitab.model.settings.Packaging
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class BillSettingsFragment : Fragment() {
    private var _binding: FragmentBillSettingsBinding? = null
    private val binding get() = _binding!!
    private val viewModel: BillSettingsViewModel by viewModels()
    private lateinit var adapter: GenericAdapter<Packaging>

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        viewModel.getPackagingList()
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentBillSettingsBinding.inflate(inflater,container,false)
        observers()
        onClickListners()
        setupRecyclerView()
        return binding.root
    }

    private fun onClickListners() {
        binding.btnAdd.setOnClickListener {
            if (binding.etPackagingValue.text.toString().isEmpty()) {
                Toast.makeText(requireContext(), "Please enter Packaging Value", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }else{
                val packaging = Packaging(userId = Config.userId,
                    packagingAmount = binding.etPackagingValue.text.toString().toDouble(),
                    isSynced = 0)

                val enteredTaxAmount = binding.etPackagingValue.text.toString().toDouble()

                if (viewModel.packagingList.value?.data?.any { it.packagingAmount == enteredTaxAmount } == true) {
                    Toast.makeText(requireContext(), "Packaging already exists", Toast.LENGTH_SHORT).show()
                } else {
                    viewModel.addPackagingObj(packaging)
                    binding.etPackagingValue.text.clear()
                }
            }

        }
    }

    private fun observers() {
        viewModel.packagingList.observe(viewLifecycleOwner) {
            it.data?.let {
                adapter.submitList(it)
            }
        }
    }

    private fun setupRecyclerView() {
        adapter = GenericAdapter(
            viewModel.packagingList.value?.data ?: emptyList(),
            object : OnItemClickListener<Packaging> {
                override fun onItemClick(item: Packaging) {
                    setupPopup(item.packagingAmount.toString()){
                        viewModel.deletePackaging(item.id.toInt())
                        adapter.notifyDataSetChanged()
                    }
                }
            },
            R.layout.item_packaging,
            BR.packaging // Variable ID generated by data binding
        )
        binding.recyclerView.adapter = adapter
        binding.recyclerView.layoutManager = LinearLayoutManager(context)
    }
    private fun setupPopup(name : String ,action: () -> Unit){
        val dialogData = DialogData(
            title = "Delete Packaging",
            info = "Are you sure you want to Delete ${name}?",
            positiveButtonText = "Delete",
            negativeButtonText = "Cancel"
        )

        showCustomAlertDialog(
            context = requireActivity(),
            dialogData = dialogData,
            positiveAction = {
                action()
            },
            negativeAction = {
                // Handle negative button action
                // E.g., dismiss the dialog
            }
        )
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}