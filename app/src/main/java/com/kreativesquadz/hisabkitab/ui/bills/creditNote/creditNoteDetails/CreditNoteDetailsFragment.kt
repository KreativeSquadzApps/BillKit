package com.kreativesquadz.hisabkitab.ui.bills.creditNote.creditNoteDetails

import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.kreativesquadz.hisabkitab.BR
import com.kreativesquadz.hisabkitab.R
import com.kreativesquadz.hisabkitab.adapter.GenericAdapter
import com.kreativesquadz.hisabkitab.adapter.showCustomAlertDialog
import com.kreativesquadz.hisabkitab.databinding.FragmentCreditNoteDetailsBinding
import com.kreativesquadz.hisabkitab.interfaces.OnItemClickListener
import com.kreativesquadz.hisabkitab.model.CreditNote
import com.kreativesquadz.hisabkitab.model.DialogData
import com.kreativesquadz.hisabkitab.model.InvoiceItem

class CreditNoteDetailsFragment : Fragment() {
    var _binding: FragmentCreditNoteDetailsBinding? = null
    val binding get() = _binding!!
    private val viewModel: CreditNoteDetailsViewModel by activityViewModels()
    private lateinit var adapter: GenericAdapter<InvoiceItem>
    lateinit var creditNote : CreditNote
    val invoiceId by lazy {
        arguments?.getString("invoiceId")
    }


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        viewModel.getCreditNote(invoiceId!!.toLong())
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentCreditNoteDetailsBinding.inflate(inflater, container, false)
        binding.isActive = false
        observers()
        onClicklisteners()
        return binding.root
    }

    fun observers(){
        viewModel.creditNote.observe(viewLifecycleOwner){
            it.let {
                binding.creditNote = it
                binding.isActive = it.status == "Active"
                creditNote = it
               binding.tvTotalTax.text =  "Total Tax Rs: ${it.totalAmount - it.amount}"
            }
        }
        viewModel.itemsList.observe(viewLifecycleOwner){
            it?.let {
                val list = it.filter { it.returnedQty!! > 0 }
                setupRecyclerView(list)
                binding.totalItem = list.size.toString()
            }
        }
    }

    fun onClicklisteners(){
        binding.btnRefund.setOnClickListener {
            setupPopup()
        }
        binding.btnReceipt.setOnClickListener {
            val action = CreditNoteDetailsFragmentDirections.actionCreditNoteDetailsFragmentToCreditNoteReceiptFragment(creditNote)
            findNavController().navigate(action)
        }
    }

    private fun setupRecyclerView(list : List<InvoiceItem>?) {
        adapter = GenericAdapter(
            list ?: emptyList(),
            object : OnItemClickListener<InvoiceItem> {
                override fun onItemClick(item: InvoiceItem) {
                    // Handle item click
                }
            },
            R.layout.item_invoice_item_credit_note,
            BR.item // Variable ID generated by data binding
        )
        binding.recyclerView.adapter = adapter
        binding.recyclerView.layoutManager = LinearLayoutManager(context)
    }
    private fun setupPopup(){
        val dialogData = DialogData(
            title = "Are you sure",
            info = "you want to Refund this CreditNote ${creditNote.id} ?",
            positiveButtonText = "REFUND",
            negativeButtonText = "Cancel"
        )

        showCustomAlertDialog(
            context = requireActivity(),
            dialogData = dialogData,
            positiveAction = {
                viewModel.updateCreditNote(requireContext(),invoiceId!!.toLong(),creditNote.copy(status = "Cleared"))
              },
            negativeAction = {
                // Handle negative button action
                // E.g., dismiss the dialog
            }
        )
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

}