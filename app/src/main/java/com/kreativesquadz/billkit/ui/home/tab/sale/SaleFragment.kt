package com.kreativesquadz.billkit.ui.home.tab.sale

import androidx.fragment.app.viewModels
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.StaggeredGridLayoutManager
import androidx.recyclerview.widget.StaggeredGridLayoutManager.VERTICAL
import com.kreativesquadz.billkit.BR
import com.kreativesquadz.billkit.Config
import com.kreativesquadz.billkit.R
import com.kreativesquadz.billkit.adapter.GenericAdapter
import com.kreativesquadz.billkit.adapter.AdapterCategory
import com.kreativesquadz.billkit.adapter.showCustomAlertDialog
import com.kreativesquadz.billkit.databinding.FragmentSaleBinding
import com.kreativesquadz.billkit.interfaces.OnItemCatListener
import com.kreativesquadz.billkit.interfaces.OnItemClickListener
import com.kreativesquadz.billkit.model.Category
import com.kreativesquadz.billkit.model.DialogData
import com.kreativesquadz.billkit.model.Product
import com.kreativesquadz.billkit.ui.home.tab.SharedViewModel
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.launch


@AndroidEntryPoint
class SaleFragment : Fragment() {
    private val viewModel: SaleViewModel by viewModels()
    private var _binding: FragmentSaleBinding? = null
    private val binding get() = _binding!!
    private lateinit var adapter: GenericAdapter<Product>
    private lateinit var adapterCat: AdapterCategory<Category>
    private val sharedViewModel : SharedViewModel by activityViewModels()
    private var isOutOfStock = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        viewModel.getProducts()
        viewModel.getCategories()
    }
    override fun onResume() {
        super.onResume()
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentSaleBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        arguments?.takeIf { it.containsKey("object") }?.apply {
        }
        setupRecyclerView()
        setupRecyclerViewCat()
        observers()
    }

    private fun observers(){
        viewModel.products.observe(viewLifecycleOwner) {
            it.data?.let {
                viewModel.filterProducts(it, viewModel.selectedCategory.value)
            }
        }
        viewModel.category.observe(viewLifecycleOwner) {
            it.data?.let {
                var filteredList = it
                filteredList = filteredList + Category(10000, Config.userId, "All", 1)
                filteredList = filteredList.sortedBy { it.categoryName }
                adapterCat.submitList(filteredList)
            }
        }
        viewModel.selectedCategory.observe(viewLifecycleOwner) { category ->
            viewModel.products.value?.data?.let { productList ->
                viewModel.filterProducts(productList, category)
            }
        }
        viewModel.filteredProducts.observe(viewLifecycleOwner) { filteredList ->
            adapter.submitList(filteredList)
        }
        viewLifecycleOwner.lifecycleScope.launch {
            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.RESUMED) {
                launch {
                    sharedViewModel.posSettings.collect { printerSettings ->
                        isOutOfStock = printerSettings.isBlockOutOfStock
                    }
                }
            }
        }
    }

    private fun setupRecyclerView() {
        adapter = GenericAdapter(
            viewModel.products.value?.data ?: emptyList(),
            object : OnItemClickListener<Product> {
                override fun onItemClick(item: Product) {
                    if(!sharedViewModel.isProductAdded(item)){
                        item.productStock?.let {
                            if (it <= 0 && isOutOfStock){
                                setupPopup(item.productName){
                                }
                            }else{
                                sharedViewModel.addProduct(item)
                            }
                        }
                    }
                }
            },
            R.layout.item_product_home,
            BR.productHome // Variable ID generated by data binding
        )
        binding.recyclerView.adapter = adapter
        binding.recyclerView.layoutManager = StaggeredGridLayoutManager(2, VERTICAL)
    }


    private fun setupRecyclerViewCat() {
        adapterCat = AdapterCategory(
            viewModel.category.value?.data ?: emptyList(),
            object : OnItemCatListener<Category> {
                override fun onItemCat(item: Category) {
                    viewModel.selectedCategory.value = item.categoryName
                    adapterCat.isSelected(item.categoryName)

                }
            },
            R.layout.item_category_home,
            BR.category // Variable ID generated by data binding
        )
        binding.recyclerViewCat.adapter = adapterCat
        binding.recyclerViewCat.layoutManager = LinearLayoutManager(context)
    }

    private fun setupPopup(name : String ,action: () -> Unit){
        val dialogData = DialogData(
            title = "Out Of Stock",
            info = "Item ${name} is Out Of Stock. You Cannot Proceed with the sale.\n To proceed with the sale," +
                    " Adjust the stock or Enable the sale of Out Of Stock Item in Pos Settings",
            positiveButtonText = "Okay",
            negativeButtonText = "Cancel"
        )

        showCustomAlertDialog(
            context = requireActivity(),
            dialogData = dialogData,
            positiveAction = {
                action()
            },
            negativeAction = {
                // Handle negative button action
                // E.g., dismiss the dialog
            }
        )
    }
    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

}