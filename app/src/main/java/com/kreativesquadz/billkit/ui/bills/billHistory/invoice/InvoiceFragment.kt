package com.kreativesquadz.billkit.ui.bills.billHistory.invoice

import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.kreativesquadz.billkit.BR
import com.kreativesquadz.billkit.Config
import com.kreativesquadz.billkit.R
import com.kreativesquadz.billkit.adapter.GenericAdapter
import com.kreativesquadz.billkit.databinding.FragmentInvoiceBinding
import com.kreativesquadz.billkit.interfaces.OnItemClickListener
import com.kreativesquadz.billkit.model.Category
import com.kreativesquadz.billkit.model.InvoiceItem
import com.kreativesquadz.billkit.model.Invoice

class InvoiceFragment : Fragment() {
    var _binding: FragmentInvoiceBinding? = null
    val binding get() = _binding!!
    private val viewModel: InvoiceViewModel by activityViewModels()
    private lateinit var adapter: GenericAdapter<InvoiceItem>
    val invoice by lazy {
        arguments?.getSerializable("invoice") as? Invoice
    }


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        viewModel.fetchInvoiceItems(invoice!!.id)
    }

    override fun onStart() {
        super.onStart()
        viewModel.fetchInvoiceItems(invoice!!.id)
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentInvoiceBinding.inflate(inflater, container, false)
        onClickListeners()
        observers()
        return binding.root

    }



      fun observers(){
          val invoice = viewModel.getInvoiceDetails(invoice?.id.toString())
          invoice.observe(viewLifecycleOwner) {
              binding.invoice = it
              binding.isCustomerAvailable = it.customerId != null
              binding.customer = viewModel.getCustomerById(it.customerId.toString())
          }
          viewModel.invoiceItems.observe(viewLifecycleOwner){
              setupRecyclerView(it)
              Log.e("wwwwwww",it.toString())

          }
      }

    private  fun onClickListeners() {
        binding.btnReceipt.setOnClickListener {
            val action = InvoiceFragmentDirections.actionInvoiceFragmentToReceiptFrag(invoice?.id.toString(),Config.InvoiceFragmentToReceiptFragment)
            findNavController().navigate(action)
        }

        binding.btnSaleReturn.setOnClickListener {
            invoice?.let {
                val action = InvoiceFragmentDirections.actionInvoiceFragmentToSaleReturnFragment(it)
                findNavController().navigate(action)
            }
        }
    }

    private fun setupRecyclerView(list : List<InvoiceItem>?) {
        adapter = GenericAdapter(
            list ?: emptyList(),
            object : OnItemClickListener<InvoiceItem> {
                override fun onItemClick(item: InvoiceItem) {
                    // Handle item click
                }
            },
            R.layout.item_invoice_item,
            BR.item // Variable ID generated by data binding
        )
        binding.recyclerView.adapter = adapter
        binding.recyclerView.layoutManager = LinearLayoutManager(context)
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

}