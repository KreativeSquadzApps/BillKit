package com.kreativesquadz.billkit.ui.settings.menuItems.taxSettings.tab.tabTaxes.taxDetails

import android.graphics.Color
import android.graphics.PorterDuff
import androidx.fragment.app.viewModels
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.kreativesquadz.billkit.BR
import com.kreativesquadz.billkit.R
import com.kreativesquadz.billkit.adapter.GenericAdapter
import com.kreativesquadz.billkit.adapter.showCustomAlertDialog
import com.kreativesquadz.billkit.databinding.FragmentTaxDetailsSettingBinding
import com.kreativesquadz.billkit.interfaces.OnItemClickListener
import com.kreativesquadz.billkit.model.DialogData
import com.kreativesquadz.billkit.model.settings.GST
import com.kreativesquadz.billkit.model.Product
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class TaxDetailsSettingFragment : Fragment() {
    private var _binding: FragmentTaxDetailsSettingBinding? = null
    private val binding get() = _binding!!
    private val viewModel: TaxDetailsSettingViewModel by viewModels()
    private lateinit var adapter: GenericAdapter<Product>
    private var isDeleteAvailable = false
    private var productCount : Int ? = null
    private val selectedGstTax  by lazy {
        arguments?.getSerializable("selectedGstTax") as? GST
    }


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // TODO: Use the ViewModel
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentTaxDetailsSettingBinding.inflate(inflater, container, false)
        binding.gstDetailsdd = selectedGstTax
        observers()
        onClickListeners()
        setupRecyclerView()
        return binding.root
    }

    private fun observers(){
        selectedGstTax?.let {
            viewModel.setProductTax(it.taxAmount)
        }
        viewModel.productsForUserByTax.observe(viewLifecycleOwner) { productList ->
            productCount = productList.size
            binding.tvProductsCount.text = productCount.toString()
            if (productCount == 0){
                binding.ivDelete.alpha = 1.0f
                binding.ivDelete.clearColorFilter()
                binding.ivDelete.isEnabled = true
                binding.ivDelete.isClickable = true
            }else{
                binding.ivDelete.alpha = 0.5f
                binding.ivDelete.setColorFilter(Color.GRAY, PorterDuff.Mode.SRC_IN)
                binding.ivDelete.isEnabled = false
                binding.ivDelete.isClickable = false
            }
            adapter.submitList(productList)
        }
    }

    private fun onClickListeners(){
        binding.ivDelete.setOnClickListener {
            selectedGstTax?.let {
                setupPopup(it.taxAmount.toString()){
                    viewModel.deleteGST(it.id)
                    findNavController().popBackStack()
                }
            }
        }
    }

    private fun setupRecyclerView() {
        adapter = GenericAdapter(
            emptyList(),
            object : OnItemClickListener<Product> {
                override fun onItemClick(item: Product) {
//                    val action = CustomerManagementFragDirections.actionCustomerManagementFragToCustomerDetailsFragment(item)
//                    findNavController().navigate(action)

                }
            },
            R.layout.item_tax_details_products,
            BR.taxProducts // Variable ID generated by data binding
        )
        binding.recyclerView.adapter = adapter
        binding.recyclerView.layoutManager = LinearLayoutManager(context)
    }
    private fun setupPopup(name : String ,action: () -> Unit){
        val dialogData = DialogData(
            title = "Delete Gst",
            info = "Are you sure you want to Delete ${name} Gst ?",
            positiveButtonText = "Delete",
            negativeButtonText = "Cancel"
        )

        showCustomAlertDialog(
            context = requireActivity(),
            dialogData = dialogData,
            positiveAction = {
                action()
            },
            negativeAction = {
                // Handle negative button action
                // E.g., dismiss the dialog
            }
        )
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

}