package com.kreativesquadz.billkit.ui.bills

import androidx.fragment.app.viewModels
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.kreativesquadz.billkit.BR
import com.kreativesquadz.billkit.Config
import com.kreativesquadz.billkit.R
import com.kreativesquadz.billkit.adapter.GenericAdapter
import com.kreativesquadz.billkit.databinding.FragmentReceiptBinding
import com.kreativesquadz.billkit.interfaces.OnItemClickListener
import com.kreativesquadz.billkit.model.Invoice
import com.kreativesquadz.billkit.model.InvoiceItem
import com.kreativesquadz.billkit.ui.home.tab.SharedViewModel
import com.kreativesquadz.billkit.utils.addBackPressHandler
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class ReceiptFrag : Fragment() {
    var _binding: FragmentReceiptBinding? = null
    val binding get() = _binding!!
    private val viewModel: ReceiptViewModel by viewModels()
    private val sharedViewModel: SharedViewModel by activityViewModels()
    private lateinit var adapter: GenericAdapter<InvoiceItem>
    lateinit var invoiceP: Invoice

    val invoiceId by lazy {
        arguments?.getString("invoiceId")
    }
    val target by lazy {
        arguments?.getString("target")
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        viewModel.getCompanyDetailsRec()
        viewModel.fetchInvoiceItems(invoiceId!!.toLong())
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentReceiptBinding.inflate(inflater, container, false)
        observers()
        onClickListeners()
        addBackPressHandler(viewLifecycleOwner, ::shouldAllowBack)
        return binding.root
    }

    fun observers(){
        val invoice= viewModel.getInvoiceDetails(invoiceId!!)
        invoice.observe(viewLifecycleOwner) {
            binding.invoice = it
            invoiceP = it
            binding.isCustomerAvailable = it?.customerId != null
            binding.customer = viewModel.getCustomerById(it?.customerId.toString())
        }
        viewModel.companyDetails.observe(viewLifecycleOwner){
            it.data?.let {
                binding.companyDetails = it
            }
        }
        viewModel.invoiceItems.observe(viewLifecycleOwner){
            setupRecyclerView(it)
        }

        target?.let {
            if (it.equals(Config.BillDetailsFragmentToReceiptFragment)){
                binding.backImage.setBackgroundResource(R.drawable.home_light)
                binding.backText.text = "New Sale"
            }else{
                binding.backImage.setBackgroundResource(R.drawable.back_light)
                binding.backText.text = "Back"
            }
        }
    }

    fun onClickListeners(){
        binding.btnBack.setOnClickListener {
            if(target == Config.BillDetailsFragmentToReceiptFragment)
                findNavController().navigate(R.id.action_receiptFrag_to_nav_home)
            else
                findNavController().popBackStack()
        }

        binding.btnPrint.setOnClickListener {
            val action = ReceiptFragDirections.actionReceiptFragToBluetoothDeviceFragment(invoiceP)
            findNavController().navigate(action)
        }

    }


    private fun setupRecyclerView(receiptInvoiceItem: List<InvoiceItem>?) {
        adapter = GenericAdapter(
            receiptInvoiceItem ?: emptyList(),
            object : OnItemClickListener<InvoiceItem> {
                override fun onItemClick(item: InvoiceItem) {
                    // Handle item click
                }
            },
            R.layout.item_invoice_item_receipt,
            BR.item // Variable ID generated by data binding
        )
        binding.itemListRecyclerview.adapter = adapter
        binding.itemListRecyclerview.layoutManager = LinearLayoutManager(context)
    }

    private fun shouldAllowBack(): Boolean {
        // Your logic to allow or restrict back action
        return false // Change this according to your logic
    }
    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

}