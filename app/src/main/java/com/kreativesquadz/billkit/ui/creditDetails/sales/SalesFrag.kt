package com.kreativesquadz.billkit.ui.creditDetails.sales

import androidx.fragment.app.viewModels
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.kreativesquadz.billkit.BR
import com.kreativesquadz.billkit.R
import com.kreativesquadz.billkit.adapter.GenericAdapter
import com.kreativesquadz.billkit.databinding.FragmentSalesBinding
import com.kreativesquadz.billkit.interfaces.OnItemClickListener
import com.kreativesquadz.billkit.model.Customer
import com.kreativesquadz.billkit.ui.bottomSheet.customerReceiveCredit.CustomerReceiveCreditBottomSheetFrag
import com.kreativesquadz.billkit.ui.customerManag.CustomerManagementFragDirections
import com.kreativesquadz.billkit.ui.customerManag.customerDetails.CustomerSharedViewModel
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class SalesFrag : Fragment() {
    private var _binding: FragmentSalesBinding? = null
    private val binding get() = _binding!!
    private lateinit var adapter: GenericAdapter<Customer>
    private val viewModel: SalesViewModel by viewModels()
    private val sharedViewModel: CustomerSharedViewModel by activityViewModels()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        viewModel.getCustomers()

    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentSalesBinding.inflate(inflater, container, false)
        setupRecyclerView()
        observers()
        onClickListeners()
        return binding.root
    }
    private fun observers() {
        viewModel.customer.observe(viewLifecycleOwner) {
            if (it.data != null){
                binding.totalCreditAmount.text = it.data.sumOf { it.creditAmount.toDoubleOrNull() ?: 0.0 }.toString()
                adapter.submitList(it.data.filter { customer ->
                    (customer.creditAmount.toDoubleOrNull() ?: 0.0) > 0.0
                })
            }
        }
    }

    private fun onClickListeners() {
        binding.etCustomer.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                viewModel.customer.value?.data?.let {
                    adapter.submitList(it.filter { customer ->
                        customer.customerName.contains(s.toString(), ignoreCase = true)})
                }
            }
            override fun afterTextChanged(s: Editable?) {}
        })
    }

    private fun setupRecyclerView() {
        adapter = GenericAdapter(
            viewModel.customer.value?.data ?: emptyList(),
            object : OnItemClickListener<Customer> {
                override fun onItemClick(item: Customer) {
                    sharedViewModel.setCustomer(item.id.toString())
                    val customerReceiveCreditBottomSheetFrag = CustomerReceiveCreditBottomSheetFrag()
                    customerReceiveCreditBottomSheetFrag.show(parentFragmentManager, customerReceiveCreditBottomSheetFrag.tag)
                }
            },
            R.layout.item_customer_credit__details,
            BR.creditCustomer // Variable ID generated by data binding
        )
        binding.recyclerView.adapter = adapter
        binding.recyclerView.layoutManager = LinearLayoutManager(context)
    }

    override fun onDestroy() {
        super.onDestroy()
        _binding = null
    }
}